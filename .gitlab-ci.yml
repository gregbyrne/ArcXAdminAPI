stages:
  - test
  - build
  - images
  - deploy
  - Image Scan

default:
  tags:
    - devsecops-instance

variables:
  KUBE_CONTEXT: arc-x/arc-x-k8s-agent:arcx-dev-k8s-agent

include:
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - project: 'DSO/DASTScanner'
    file: '.gitlab-ci.yml'

# Set K8s context of GitLab Agent
.kube-context:
  before_script:
    - if [ -n "$KUBE_CONTEXT" ]; then kubectl config use-context "$KUBE_CONTEXT"; fi

build-app:
  stage: build
  image: maven:3-openjdk-11
  script:
    - mkdir -p /root/.m2/repository/org/springframework/
    - mkdir -p /root/.m2/repository/io/
    - unzip static-deps/data.zip -d /root/.m2/repository/org/springframework
    - unzip static-deps/swagger.zip -d /root/.m2/repository/io
    - mvn install -DskipTests
    - ls -al target/
  artifacts:
    paths:
      - target/arcx-0.0.1-SNAPSHOT.jar

admin-api-app:image:build:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/admin-api-app/Dockerfile --destination $CI_REGISTRY_IMAGE/admin-api-app:$CI_COMMIT_SHORT_SHA

admin-api-web:image:build:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/admin-api-web/Dockerfile --destination $CI_REGISTRY_IMAGE/admin-api-web:$CI_COMMIT_SHORT_SHA

deploy to dev:
  when: manual
  stage: deploy
  extends: [.kube-context]
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - envsubst < k8s/arcx-admin-api-configmap.yml #| kubectl apply -f -
    # - envsubst < k8s/arcx-admin-api-app.yml | kubectl apply -f -
    # - envsubst < k8s/arcx-admin-api-web.yml | kubectl apply -f -
  environment:
    name: dev
    url: https://arcx-admin-api.devsecops-dev.aws.epa.gov
    kubernetes:
      namespace: arc-x-admin-api-235-dev
  only:
    - branches
  except:
    - master

#deploy to staging:
#  when: manual
#  stage: deploy
#  image: dtzar/helm-kubectl
#  variables:
#    INGRESS_HOST: "arcx-admin-api-stg.devsecops-eval.epa.gov"
#  script:
#    - apk add gettext
#    - kubectl config set-cluster stg-cluster --server="$KUBE_URL"
#    - kubectl config set-cluster stg-cluster --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
#    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
#    - kubectl config set-context default --cluster=stg-cluster --user=gitlab --namespace="$KUBE_NAMESPACE"
#    - kubectl config use-context default
#    - envsubst < k8s/arcx-admin-api-configmap.yml | kubectl apply -f -
#    - envsubst < k8s/arcx-admin-api-app.yml | kubectl apply -f -
#    - envsubst < k8s/arcx-admin-api-web.yml | kubectl apply -f -
#  environment:
#    name: staging
#    url: "https://$INGRESS_HOST"
#  only:
#    refs:
#      - stage

prisma-scan:
  stage: Image Scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  parallel:
    matrix:
      - prisma_cloud_scan_image: ["$CI_REGISTRY_IMAGE/admin-api-web:$CI_COMMIT_SHORT_SHA","$CI_REGISTRY_IMAGE/admin-api-app:$CI_COMMIT_SHORT_SHA"]
  variables:
    prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
    GIT_STRATEGY: clone
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh

